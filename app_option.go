// Code generated by "gogen option -n App -s recover,ctx --with-prefix --with-init"; DO NOT EDIT.

package ho

import (
	"context"
	"fmt"
)

func NewApp(_opts ...AppOption) *App {
	_a := new(App)

	_a.SetOptions(_opts...)

	_a.init()
	return _a
}

type AppOption interface {
	apply(*App)
}

type appOptionFunc func(*App)

func (f appOptionFunc) apply(_a *App) {
	f(_a)
}

func (_a *App) SetOptions(_opts ...AppOption) *App {
	for _, _opt := range _opts {
		_opt.apply(_a)
	}
	return _a
}

func SkipAppOption() AppOption {
	return appOptionFunc(func(_a *App) {
		return
	})
}

func WithAppOptions(o *appOptions) AppOption {
	return appOptionFunc(func(_a *App) {
		_a.SetOptions(o.opts...)
	})
}

type appOptions struct {
	opts []AppOption
}

func NewAppOptions() *appOptions {
	return new(appOptions)
}

func (_o *appOptions) Options() []AppOption {
	return _o.opts
}

func (_o *appOptions) Append(_opts ...AppOption) *appOptions {
	_o.opts = append(_o.opts, _opts...)
	return _o
}

func (_o *appOptions) Recover(recover ContextFunc) *appOptions {
	_o.opts = append(_o.opts, WithAppRecover(recover))
	return _o
}

func (_o *appOptions) Ctx(ctx context.Context) *appOptions {
	_o.opts = append(_o.opts, WithAppCtx(ctx))
	return _o
}

func WithAppRecover(recover ContextFunc) AppOption {
	return appOptionFunc(func(_a *App) {
		_a.recover = recover
	})
}

func WithAppCtx(ctx context.Context) AppOption {
	return appOptionFunc(func(_a *App) {
		_a.ctx = ctx
	})
}

func PrintAppOptions(packageName string) {
	opts := []string{
		"WithAppRecover()",
		"WithAppCtx()",
	}
	if packageName == "" {
		fmt.Printf("opts := []AppOption{ \n")
		for _, v := range opts {
			fmt.Printf("	%s,\n", v)
		}
	} else {
		fmt.Printf("opts := []%s.AppOption{ \n", packageName)
		for _, v := range opts {
			fmt.Printf("	%s.%s,\n", packageName, v)
		}
	}
	fmt.Println("}")
}
